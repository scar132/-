import time
import pyupbit
import datetime
import numpy as np
import pandas as pd
import operator

access = "IpA9tVuUxDMVozUA6XHfqs5TlTcHYeauTv9BxXoA"
secret = "6Sv2eWaz1xObkkCSkl97VgSa6gXHSirqfE4bpIa6"


def get_hpr(ticker):
    df = pyupbit.get_ohlcv(ticker, interval = "minute1", count = 61)
    ma5 = df['open'].rolling(5).mean().iloc[-1]
    ma5_1 = df['open'].rolling(5).mean().iloc[-2]
    ma10 = df['open'].rolling(10).mean().iloc[-1]
    ma10_1 = df['open'].rolling(10).mean().iloc[-2]
    ma20 = df['open'].rolling(20).mean().iloc[-1]
    ma20_1 = df['open'].rolling(20).mean().iloc[-2] 
    price = pyupbit.get_orderbook(ticker=ticker)["orderbook_units"][0]["ask_price"]
    return (ticker, df['volume'].iloc[-1] / df['volume'].iloc[-2], ma5/ma10, ma5-ma10, ma10-ma20, ma5_1-ma10_1, ma10_1-ma20_1)

tickers = pyupbit.get_tickers(fiat = "KRW") 
hprs = []
for ticker in tickers:
    hpr = get_hpr(ticker)
    hprs.append(hpr)

sorted_hprs = sorted(hprs, key=operator.itemgetter(7), reverse=True)

hrr = []
for i in range(0, 50):
    if (sorted_hprs[i][2] > 1) & (sorted_hprs[i][3] > 0) & (sorted_hprs[i][4] > 0):
        hrr.append(sorted_hprs[i])

print(hrr)
selected_ticker = hrr[1][0]




def get_close_price(ticker, k):
    """변동성 돌파 전략으로 매수 목표가 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=1)
    close_price = df.iloc[0]['close'] 
    return close_price

def get_low_price(ticker, k):
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=1)
    low_price = df.iloc[0]['low'] 
    return low_price


def get_stochastic_fast_k(ticker):
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=45)
    df['fast_k'] = ((df['close']-df['low'].rolling(5).min()) / (df['high'].rolling(5).max() - df['low'].rolling(5).min())) * 100
    return df['fast_k'].iloc[-1]

# Slow %K = Fast %K의 m기간 이동평균(SMA)
def get_stochastic_slow_k(ticker):
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=45)
    df['fast_k'] = ((df['close']-df['low'].rolling(5).min()) / (df['high'].rolling(5).max() - df['low'].rolling(5).min())) * 100
    df['slow_k'] = df['fast_k'].rolling(3).mean()
    return df['slow_k'].iloc[-1]

# Slow %D = Slow %K의 t기간 이동평균(SMA)
def get_stochastic_slow_d(ticker):
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=45)
    df['fast_k'] = ((df['close']-df['low'].rolling(5).min()) / (df['high'].rolling(5).max() - df['low'].rolling(5).min())) * 100
    df['slow_k'] = df['fast_k'].rolling(3).mean()
    df['slow_d'] = df['slow_k'].rolling(3).mean()
    return df['slow_d'].iloc[-1]
...
# fast_k, slow_k, slow_d를 획득
# df['fast_k'] = get_stochastic_fast_k()
# df['slow_k'] = get_stochastic_slow_k()
# df['slow_d'] = get_stochastic_slow_d()

def get_ma5(ticker):
    """5일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=60)
    ma5 = df['close'].rolling(5).mean().iloc[-1]
    return ma5

def get_ma10(ticker):
    """1일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=60)
    ma10 = df['close'].rolling(10).mean().iloc[-1]
    return ma10


def get_ma20(ticker):
    """20일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=60)
    ma20 = df['close'].rolling(20).mean().iloc[-1]
    return ma20

def get_ma60(ticker):
    """60일 이동 평균선 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="minute1", count=60)
    ma60 = df['close'].rolling(60).mean().iloc[-1]
    return ma60

def get_start_time(ticker):
    """시작 시간 조회"""
    df = pyupbit.get_ohlcv(ticker, interval="day", count=1)
    start_time = df.index[0]
    return start_time

def get_balance(ticker):
    """잔고 조회"""
    balances = upbit.get_balances()
    for b in balances:
        if b['currency'] == ticker:
            if b['balance'] is not None:
                return float(b['balance'])
            else:
                return 0
    return 0

def get_current_price(ticker):
    """현재가 조회"""
    return pyupbit.get_orderbook(ticker=ticker)["orderbook_units"][0]["ask_price"]

# 로그인
upbit = pyupbit.Upbit(access, secret)
print("autotrade start")

# 자동매매 시작
while True:
    try:
        now = datetime.datetime.now()
        start_time = get_start_time(selected_ticker)
        end_time = start_time + datetime.timedelta(days=1)

        if (start_time < now) & (now < (end_time - datetime.timedelta(seconds=10))):
            close_price = get_close_price(selected_ticker, 0.5)
            low_price = get_low_price(selected_ticker, 0.5)
            ma5 = get_ma5(selected_ticker)
            ma10 = get_ma10(selected_ticker)
            ma20 = get_ma20(selected_ticker)
            ma60 = get_ma60(selected_ticker)
            # fast_k, slow_k, slow_d를 획득
            fast_k = get_stochastic_fast_k(selected_ticker)
            slow_k = get_stochastic_slow_k(selected_ticker)
            slow_d = get_stochastic_slow_d(selected_ticker)
            current_price = get_current_price(selected_ticker)
            if (ma5 > ma10) & (ma10 > ma20):
                krw = get_balance("KRW")
                if krw > 5000:
                    upbit.buy_market_order(selected_ticker, krw*0.9995)
                    print("buy " + selected_ticker)
            elif (ma5 < ma10):
                selected_ticker = get_balance(selected_ticker.replace("KRW-", ""))
                if selected_ticker > 0.00008:
                    upbit.sell_market_order(selected_ticker, selected_ticker*1.0000)
                    print("sell " + selected_ticker)
                    time.sleep(10)
            else:
                pass
            time.sleep(1)

    except Exception as e:
        print(e)
        time.sleep(1)
